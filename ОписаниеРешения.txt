1. Минимизация потребления ресурсов
Приложение стабильно потребляет около 0.1 CPU и 128MB памяти, но требует больше ресурсов на этапе инициализации. Это подсказывает, что мы можем задать небольшие запросы на ресурсы, а лимиты — повыше, чтобы поды могли динамически использовать больше CPU во время старта. Решение:
Requests: Запрашиваем 128Mi памяти и 0.1 CPU, поскольку это соответствует реальному среднему потреблению.
Limits: Устанавливаем лимиты на уровне 256Mi памяти и 0.5 CPU, чтобы поды могли использовать больше ресурсов при старте.
Этот подход помогает сбалансировать производительность и минимизацию потребления.

2. Антиаффинность для распределения подов на разные ноды
Для повышения отказоустойчивости важно разместить поды на разных нодах. В Kubernetes можно настроить антиаффинность, которая запрещает размещать поды одного и того же приложения на одной ноде. В данном случае:
Используем podAntiAffinity с условием, что поды должны быть разнесены по разным хостам (topologyKey: "kubernetes.io/hostname"). Это предотвращает ситуацию, когда все поды будут на одной ноде, что снизило бы отказоустойчивость в случае падения ноды.

3. Запуск пода только после завершения инициализации
Поскольку приложение требует около 5-10 секунд на инициализацию и не должно принимать запросы до завершения, я применил комбинацию Liveness, Readiness и Startup Probes:
Liveness Probe: Проверяет, что приложение "живое". Эта проверка нужна для своевременного перезапуска пода, если он перестал работать корректно.
Readiness Probe: Позволяет Kubernetes убедиться, что под готов к приёму запросов. До тех пор, пока приложение не будет полностью инициализировано, оно не будет получать трафик. Это защищает от ситуаций, когда под запускается, но ещё не готов к работе.
Startup Probe: В случае долгой инициализации использую эту проверку. Она сообщает Kubernetes, что под завершил инициализацию. Если под долго не может завершить старт, он будет перезапущен.

4. Выбор числа подов
Вы указали, что 3 пода справляются с нагрузкой. Это стало отправной точкой для задания нужного количества реплик в Deployment:
Replicas: Устанавливаем 3 пода, так как этого достаточно для обработки стабильной нагрузки.

5. Настройка ресурсов для старта и работы
Учитывая, что приложение испытывает пиковую нагрузку на CPU на этапе запуска, но затем стабильно работает с минимальными ресурсами, я задал такие параметры:
Requests: 0.1 CPU и 128Mi памяти, чтобы поддерживать минимальное потребление при обычной работе.
Limits: 0.5 CPU и 256Mi памяти для обеспечения нужных ресурсов на этапе инициализации.

P.S. Ресурсы которые использовались для решения задачи: 
	https://kubernetes.io/ru/docs/tasks/configure-pod-container/assign-memory-resource/
	https://qna.habr.com/
